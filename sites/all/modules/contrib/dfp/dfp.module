<?php

define('DFP_GOOGLE_TAG_SERVICES_URL', 'www.googletagservices.com/tag/js/gpt.js');
define('DFP_GOOGLE_SHORT_TAG_SERVICES_URL', 'pubads.g.doubleclick.net/gampad');

/**
 * Implements hook_help().
 */
function dfp_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dfp':
      $output = '<p>' . t('The Doubleclick For Publishers (DFP) module allows you to integrate Google Publisher Tags onto your site.') . '</p>';
      $output .= '<p>' . t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can display your ads as blocks, or add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dfp_permission() {
  return array(
    'administer DFP' => array(
      'title' => t('Administer Doubleclick for Publisher ads'),
      'description' => t('Users can create, edit, and delete Doubleclick for Publishers (dfp) ad tags and configure how and when they should be displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dfp_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'dfp_tag' => array(
      'variables' => array(
        'tag' => NULL,
      ),
      'template' => 'theme/dfp_tag',
    ),
    'dfp_short_tag' => array(
      'variables' => array(
        'tag' => NULL,
      ),
      'template' => 'theme/dfp_short_tag',
    ),
    'dfp_target_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
    'dfp_adsense_color_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_menu().
 */
function dfp_menu() {
  $items = array();

  $items['admin/structure/dfp_ads/settings'] = array(
    'title' => 'Global DFP Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide DFP settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_admin_settings'),
    'access arguments' => array('administer DFP'),
    'file' => 'dfp.admin.inc',
    'weight' => 5,
  );
  $items['admin/structure/dfp_ads/test_page'] = array(
    'title' => 'DFP Test Page',
    'type' => MENU_LOCAL_TASK,
    'description' => "View all your DFP tags on a single page",
    'page callback' => 'dfp_adtest_page',
    'access arguments' => array('administer DFP'),
    'file' => 'dfp.adtest.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function dfp_block_info() {
  $tags = _dfp_block_tags();

  $blocks = array();
  foreach ($tags as $tag) {
    $blocks[$tag->machinename]['info'] = t('DFP tag: !slotname', array('!slotname' => $tag->slot));
    $blocks[$tag->machinename]['cache'] = DRUPAL_CACHE_PER_PAGE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dfp_block_view($delta) {
  $block['content'] = dfp_tag($delta);

  return $block;
}

/**
 * Implements hook_entity_view().
 */
function dfp_entity_view($entity, $type, $view_mode, $langcode) {
  $dfp_targeting_terms = &drupal_static('dfp_entity_targeting_terms', array());

  if ($view_mode == 'full') {
    // Find all taxonomy terms attached to the given entity and add them to the
    // dfp_targeting_terms array. Check each term to see if a DFP Ad Category has
    // been assigned to it. If so, add that term to the array instead.
    foreach (element_children($entity->content) as $key) {
      if (array_key_exists('#field_type', $entity->content[$key]) && $entity->content[$key]['#field_type'] == 'taxonomy_term_reference') {
        $terms = field_view_field($type, $entity, $key);
        foreach ($terms['#items'] as $item) {
          $dfp_targeting_terms[] = _dfp_get_ad_category($item['taxonomy_term']);
        }
      }
    }

    $dfp_targeting_terms = array_unique($dfp_targeting_terms);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dfp_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_context_registry().
 */
function dfp_context_registry() {
  return array(
    'reactions' => array(
      'dfp_tags' => array(
        'title' => t('DFP tags'),
        'plugin' => 'dfp_context_reaction_tags',
      ),
      'dfp_settings' => array(
        'title' => t('DFP settings'),
        'plugin' => 'dfp_context_reaction_settings',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function dfp_context_plugins() {
  $plugins = array();
  $plugins['dfp_context_reaction_tags'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dfp') . '/plugins/contexts',
      'file' => 'dfp_context_reaction_tags.inc',
      'class' => 'dfp_context_reaction_tags',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['dfp_context_reaction_settings'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dfp') . '/plugins/contexts',
      'file' => 'dfp_context_reaction_settings.inc',
      'class' => 'dfp_context_reaction_settings',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements of hook_token_info().
 */
function dfp_token_info() {
  $type = array(
    'name' => t('DFP Ad Tags'),
    'description' => t('Tokens related to a given DFP ad tag.'),
    'needs-data' => 'tag',
  );

  $tag['slot'] = array(
    'name' => t('Slot Name'),
    'description' => t("The name of the ad slot defined by this tag."),
  );
  $tag['network_id'] = array(
    'name' => t("Network ID"),
    'description' => t("The unique ID provided by Google."),
  );
  $tag['ad_categories'] = array(
    'name' => t("DFP Ad Categories"),
    'description' => t("The DFP Ad Categories or uncategorized taxonomy terms attached to the entities currently being displayed to the user."),
  );
  $tag['url_parts'] = array(
    'name' => t("URL Parts (n)"),
    'description' => t("Given the current URL of http://site.com/path/to/page, [dfp_tag:url_parts:2] will be replaced with 'path/to'."),
  );

  return array(
    'types' => array('dfp_tag' => $type),
    'tokens' => array('dfp_tag' => $tag),
  );
}

/**
 * Implements of hook_token().
 */
function dfp_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'dfp_tag') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'slot':
          if (!empty($data['tag'])) {
            $replacements[$original] = check_plain($data['tag']->slot);
          }
          break;

        case 'network_id':
          $replacements[$original] = check_plain(variable_get('dfp_network_id', ''));
          break;

        case 'ad_categories':
          $term_names = &drupal_static('dfp_entity_targeting_terms', array());

          // If a term has been explicitly defined because we are on a term page
          // then add the term to the list.
          // @todo: If http://drupal.org/node/1067120 ever lands, this logic can
          // be moved to dfp_entity_view() where it belongs.
          if (isset($data['term'])) {
            $term_names[] = _dfp_get_ad_category($data['term']);
          }

          $replacements[$original] = implode(',', $term_names);
          break;
      }
    }

    if ($created_tokens = token_find_with_prefix($tokens, 'url_parts')) {
      foreach ($created_tokens as $name => $original) {
        $url_parts = explode('/', $_GET['q']);
        $replacements[$original] = implode('/', array_slice($url_parts, 0, $name));
      }
    }
  }

  return $replacements;
}

/**
 * Implements preprocess_page().
 */
function dfp_preprocess_page($variables) {
  // Add the header js here so that enough information has been loaded for
  // tokens to work properly.
  _dfp_js_global_settings();
}


/**
 * Return a render array for the tag specified by machinename.
 */
function dfp_tag($machinename) {
  $tag = dfp_tag_load($machinename);
  $render_array = array();

  if ($tag) {
    $tag->slug = dfp_format_slug($tag->slug);

    if (!empty($tag)) {
      $render_array = array(
        'dfp_wrapper' => array(
          '#type' => 'container',
          '#attributes' => array(
            'id' => $tag->wrapper_id,
            'class' => array(
              'dfp-tag-wrapper',
            ),
          ),
          'tag' => array(
            '#theme' => $tag->short_tag ? 'dfp_short_tag' : 'dfp_tag',
            '#tag' => $tag,
          ),
        ),
      );
      if (!empty($tag->slug)) {
        $render_array['dfp_wrapper']['slug_wrapper'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'slug',
            ),
          ),
          'slug' => array(
            '#markup' => $tag->slug,
          ),
          '#weight' => -1,
        );
      }
    }
  }

  return $render_array;
}

/**
 * Load function.
 *
 * @param string $machinename
 *
 * @return object
 *
 */
function dfp_tag_load($machinename) {
  ctools_include('export');

  $tags = &drupal_static(__FUNCTION__, array());

  if (!isset($tags[$machinename])) {
    // Load the tag.
    $result = ctools_export_load_object('dfp_tags', 'names', array($machinename));
    if (isset($result[$machinename])) {
      $tag = $result[$machinename];
    }
    else {
      return NULL;
    }

    // Store the original tag. This is used by the tag edit form.
    $tag->raw = clone $tag;

    // Allow modules to alter the raw tag object.
    drupal_alter('dfp_tag_load', $tag);

    // Prepend the network id to the ad unit pattern.
    $tag->adunit = '[dfp_tag:network_id]/' . $tag->adunit;

    // Move the settings out of the settings array.
    foreach ($tag->settings as $key => $val) {
      $tag->{$key} = $val;
    }

    // Configure this tag based on the defined settings.
    $tag->wrapper_id = 'dfp-ad-' . $tag->machinename . '-wrapper';
    $tag->placeholder_id = 'dfp-ad-' . $tag->machinename;

    // Allow modules to alter the fully-loaded tag object.
    drupal_alter('dfp_tag', $tag);

    // Statically cache the fully loaded tag.
    $tags[$machinename] = $tag;
  }
  else {
    // Use the statically cached tag object.
    $tag = $tags[$machinename];
  }

  return $tag;
}

/**
 * Load all dfp ad tags.
 *
 * @param boolean $include_disabled
 *
 * @return array of tags.
 */
function dfp_tag_load_all($include_disabled = FALSE) {
  ctools_include('export');

  $tags = ctools_export_crud_load_all('dfp_tags');
  foreach ($tags as $key => $tag) {
    if (!$include_disabled && isset($tag->disabled) && $tag->disabled) {
      unset($tags[$key]);
    }
  }

  return $tags;
}

/**
 * Save a single tag.
 */
function dfp_tag_save(&$tag) {
  $update = (isset($tag->adid) && is_numeric($tag->adid)) ? array('adid') : array();
  return drupal_write_record('dfp_tag', $tag, $update);
}

/**
 * Alter a dfp tag object to integrate with the contexts module.
 */
function dfp_dfp_tag_load_alter(&$tag) {
  // Remove any disabled tags.
  if (module_exists('context')) {
    // Hide the tag based on the current context.
    if ($plugin = context_get_plugin('reaction', 'dfp_tags')) {
      $plugin->execute($tag);
    }
    // Override the tag's settings based on the current context. This must
    // come after settings is unserialized.
    if ($plugin = context_get_plugin('reaction', 'dfp_settings')) {
      $plugin->execute($tag);
    }
  }

  // Handle ad testing.
  module_load_include('inc', 'dfp', 'dfp.adtest');
  dfp_adtest_alter_tag($tag);
}

/**
 * Alter the vertical tabs group in which the exportable scheduler form should
 * live.
 */
function dfp_exportable_scheduler_form_group_alter(&$group) {
  $group = 'settings';
}

/**
 * Form alter for the ctools_export_ui_edit_item_form.
 */
function dfp_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if (arg(2) == 'context') {
    // Make sure that dfp.admin.inc is included on the context ui form to avoid
    // errors when doing an ajax submit.
    form_load_include($form_state, 'inc', 'dfp', 'dfp.admin');
    //array_unshift($form['#submit'], 'dps_targeting_form_submit');
  }
}

/**
 * Format the given array of values to be displayed as part of a javascript.
 *
 * @param array $variables
 *  'values' => A simple array of targeting values. Ex. val1, val2, val3
 *
 * @return string
 *   If $values had one item, then a string in the format ["val1"]. If $values
 *   has more than one item, then a string in the format ["val1","val2","val3"].
 *
 */
function dfp_format_targeting($targeting, $tag = '') {
  if (!empty($targeting)) {
    // Prepare information needed for token replacements.
    global $user;
    $data = array('user' => $user);
    if (!empty($tag)) {
      $data['tag'] = $tag;
    }
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $data['node'] = node_load(arg(1));
    }
    if (arg(0) == 'taxonomy' && is_numeric(arg(2))) {
      $data['term'] = taxonomy_term_load(arg(2));
    }
  }

  foreach ($targeting as $key => &$target) {
    $target['target'] = '"' . check_plain($target['target']) . '"';
    $target['value'] = token_replace(check_plain($target['value']), $data);

    // The target value could be blank if tokens are used. If so, removed it.
    if (empty($target['value'])) {
      unset($targeting[$key]);
      break;
    }

    // Convert the values into an array and trim the whitespace from each value.
    $values = explode(',', $target['value']);
    $values = array_map('trim', $values);

    if (count($values) == 1) {
      $target['value'] = '"' . $values[0] . '"';
    }
    elseif (count($values) > 1) {
      $target['value'] = '["' . implode('","', $values) . '"]';
    }
  }

  return $targeting;
}

/**
 * Format the the size of an ad tag.
 *
 * @param array $variables
 *   'size' => A string in the format 123x321,987x789.
 *
 * @return string
 *   A string in the format [456, 654] or [[123, 321], [987, 789]].
 *
 */
function dfp_format_size($size) {
  $formatted_sizes = array();

  $sizes = explode(',', check_plain($size));
  foreach ($sizes as $size) {
    $formatted_size = explode('x', trim($size));
    $formatted_sizes[] = '[' . implode(', ', $formatted_size) .']';
  }

  return count($formatted_sizes) == 1 ? $formatted_sizes[0] : '[' . implode(', ', $formatted_sizes) . ']';
}

/**
 * Format the the size of an ad tag.
 *
 * @param array $variables
 *   'slug' => A label for for this particular ad tag.
 *
 * @return string
 *   If $slug is none, an empty string will be returned; if $slug is a non-empty
 *   string then it will be returned unchanged; if $slug is empty, then the
 *   default slug will be returned.
 *
 */
function dfp_format_slug($slug) {
  $formatted_slug = check_plain(variable_get('dfp_default_slug', ''));

  if ($slug == '<none>') {
    $formatted_slug = "";
  }
  elseif (!empty($slug)) {
    $formatted_slug = $slug;
  }

  return $formatted_slug;
}

/**
 * Return the term object to use as the DFP Ad Category given a specific term.
 *
 * @param object $term
 *   The term object to analyze. If it is tagged with a DFP Ad Cateegory, then
 *   that term is returned, otherwise the original term is returned unchanged.
 *
 * @return string
 *   The term name to be included in an ad tag.
 */
function _dfp_get_ad_category($term) {
  if (!empty($term->field_dfp_ad_categories)) {
    $term = taxonomy_term_load($term->field_dfp_ad_categories[LANGUAGE_NONE][0]['tid']);
  }
  return $term->name;
}

/**
 * Returns an array dfp tags marked to be displayed as a block.
 */
function _dfp_block_tags() {
  $block_tags = array();
  $tags = dfp_tag_load_all();

  foreach ($tags as $tag) {
    if ($tag->block) {
      $block_tags[] = $tag;
    }
  }

  return $block_tags;
}

/**
 * Helper function to include javascript variables, etc in the header above all
 * slot definitions.
 */
function _dfp_js_global_settings() {
  // Initialize the google varibales and inject user-defined javascript.
  $js = 'var googletag = googletag || {};' . "\n";
  $js .= 'googletag.cmd = googletag.cmd || [];';
  $js .= variable_get('dfp_injected_js', '') . "\n";

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
    'weight' => -10,
  );
  drupal_add_js($js, $options);

  // Inlclude a script tag for the Google Tag Services.
  // @todo: One day this should include an async=true attribute. See #1140356.
  //        However, there is a good chance this might break <= IE8.
  $options['type'] = 'external';
  $options['weight']++;
  drupal_add_js(($GLOBALS['is_https'] ? "https://" : "http://") . DFP_GOOGLE_TAG_SERVICES_URL, $options);

  // Add global settings with a heavy weight so that they appear after all the
  // defineSlot() calls otherwise IE8 and Opera fail to display ads properly.
  $js .= 'googletag.cmd.push(function() {' . "\n";
  if (variable_get('dfp_async_rendering', 1)) {
    $js .= '  googletag.pubads().enableAsyncRendering();' . "\n";
  }
  if (variable_get('dfp_single_request', 1)) {
    $js .= '  googletag.pubads().enableSingleRequest();' . "\n";
  }
  if (variable_get('dfp_collapse_empty_divs', 1)) {
    $js .= '  googletag.pubads().collapseEmptyDivs();' . "\n";
  }

  // Set global targeting values for this page.
  $targeting = variable_get('dfp_targeting', array());
  drupal_alter('dfp_global_targeting', $targeting);
  $targeting = dfp_format_targeting($targeting);
  foreach ($targeting as $key => $target) {
    if (!empty($target['target']) && !empty($target['value'])) {
      $js .= '  googletag.pubads().setTargeting(' . $target['target'] . ', ' . $target['value'] . ');' . "\n";
    }
  }

  $js .= '});' . "\n";
  $js .= 'googletag.enableServices();';

  $options = array(
    'type' => 'inline',
    'group' => JS_DEFAULT,
    'every_page' => TRUE,
    'weight' => 10,
  );
  drupal_add_js($js, $options);
}

/**
 * Helper function to build the javascript needed to define an ad slot and add
 * it to the head tag.
 */
function _dfp_js_slot_definition($tag) {
  // Add the js needed to define this adSlot to <head>.
  $js = 'googletag.defineSlot("' . $tag->adunit . '", ' . $tag->size . ', "' . $tag->placeholder_id . '")' . "\n";
  $js .= '  .addService(googletag.pubads())' . "\n";

  if (!empty($tag->adsense_ad_types)) {
    $js .= '  .set("adsense_ad_types", "' . $tag->adsense_ad_types . '")' . "\n";
  }
  if (!empty($tag->adsense_channel_ids)) {
    $js .= '  .set("adsense_channel_ids", "' . $tag->adsense_channel_ids . '")' . "\n";
  }
  foreach ($tag->adsense_colors as $key => $val) {
    if (!empty($val)){
      $key = 'adsense_' . $key . '_color';
      $val = '#' . strtoupper($val);
      $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
    }
  }
  $targeting = dfp_format_targeting($tag->targeting, $tag);
  foreach ($targeting as $target) {
    $js .= '  .setTargeting(' . $target['target'] . ', ' . $target['value'] . ')' . "\n";
  }
  $js = rtrim($js, "\n") . ';';

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'weight' => 0,
  );
  drupal_add_js($js, $options);
}

/**
 * Preprocess function for DFP tags.
 */
function template_preprocess_dfp_tag(&$variables) {
  $tag = $variables['tag'];

  // Format certain tag properties for display.
  $tag->adunit = token_replace($tag->adunit, array('tag' => $tag));
  $tag->size = dfp_format_size($tag->size);
  $tag->slug = dfp_format_slug($tag->slug);

  // Create the attributes for the wrapper div and placeholder div.
  $variables['placeholder_attributes'] = array(
    'id' => $tag->placeholder_id,
    'class' => array(
      'dfp-tag-wrapper',
    ),
  );

  // Define a javascript ad slot for this tag.
  _dfp_js_slot_definition($tag);
}

/**
 * Preprocess function for DFP tags.
 */
function template_preprocess_dfp_short_tag(&$variables) {
  static $tile = 0;
  $tag = $variables['tag'];

  // Build a key|vals array and allow third party modules to modify it.
  $keyvals = array();
  $keyvals['iu'] = $tag->adunit;
  $keyvals['c'] = rand(100000, 99999);
  $keyvals['size'] = str_replace(',', '|', check_plain($tag->raw->size));
  $keyvals['tile'] = ++$tile;

  $targets = array();
  foreach ($tag->targeting as $data) {
    $tagets[] = check_plain($data['target']) . '=' . check_plain($data['value']);
  }
  if (!empty($targets)) {
    $keyvals['t'] = implode('&', $targets);
  }
  drupal_alter('dfp_short_tag_keyvals', $keyvals);

  $variables['url_jump'] = 'http://' . DFP_GOOGLE_SHORT_TAG_SERVICES_URL . '/jump?' . http_build_query($keyvals);
  $variables['url_ad'] = 'http://' . DFP_GOOGLE_SHORT_TAG_SERVICES_URL . '/ad?' . http_build_query($keyvals);
}
