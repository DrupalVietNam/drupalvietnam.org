<?php

/**
 * @file
 * Allows visitors to rate comments as useful or not useful.
 */

include_once dirname(__FILE__) . '/inc/is_useful.field.inc';

function is_useful_get_val($number) {
  $values = array(
    3 => 'yes',
    2 => 'maybe',
    1 => 'no',
  );
  return $values[$number];
}

function is_useful_process_vote($entity_type, $entity_id, $value) {
  // Set up default option for values.
  $values = array(
    'yes' => 3,
    'maybe' => 2,
    'no' => 1,
  );

  $vote = array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'value_type'  => 'option',
    'value' => $values[$value],
    'tag' => 'is_useful',
  );

  return votingapi_set_votes($vote);
}

function is_useful_get_votes($entity_type, $entity_id, $clear = FALSE) {
  $entities = &drupal_static(__FUNCTION__, NULL, $clear);
  if (empty($entities[$entity_type][$entity_id])) {
    $entities[$entity_type][$entity_id] = votingapi_select_results(array(
      'tag' => 'is_useful',
      'entity_id' => $entity_id,
      'entity_type' => $entity_type,
    ));
  }

  return $entities[$entity_type][$entity_id];
}

function is_useful_get_default($entity_type, $entity_id, $clear = FALSE) {
  global $user;
  $entities = &drupal_static(__FUNCTION__, NULL, $clear);
  if (empty($entities[$entity_type][$entity_id])) {
    $entities[$entity_type][$entity_id] = votingapi_select_votes(array(
      'tag' => 'is_useful',
      'entity_id' => $entity_id,
      'entity_type' => $entity_type,
      'uid' => $user->uid,
    ));
  }
  if (isset($entities[$entity_type][$entity_id][0]['value'])) {
    return $entities[$entity_type][$entity_id][0]['value'];
  }
  else {
    return 0;
  }
}

/**
 * Basic default options for is_useful.
 */
function is_useful_get_options($entity_type, $entity_id, $clear = FALSE) {
  $values = array(
    'option-3' => 0,
    'option-2' => 0,
    'option-1' => 0,
  );

  $results = is_useful_get_votes($entity_type, $entity_id, $clear);
  foreach ($results as $value) {
    $values[$value['function']] = $value['value'];
  }
  $options = array(
    'yes' => t('(!count) Yes', array('!count' => $values['option-3'])),
    'maybe' => t('(!count) Maybe', array('!count' => $values['option-2'])),
    'no' => t('(!count) No', array('!count' => $values['option-1'])),
  );

  return $options;
}

function is_useful_clean_results($results) {
  foreach ($results as $key => $value) {
    $results[$value['function']] = $value['value'];
    unset($results[$key]);
  }

  return $results;
}

function is_useful_clean_votes($results, $entity_type, $entity_id) {
  return is_useful_clean_results($results[$entity_type][$entity_id]);
}

/**
 * Default axis available.
 */
function is_useful_get_tags() {
 return array('usefulness');
}

/**
 * Simple is_useful select option. This is a select field for non-js support.
 */
function is_useful_exposed_formatter($form, &$form_state, $settings) {
  $form_state['settings'] = $settings;
  $default = is_useful_get_default($settings['entity_type'], $settings['entity_id']);
  if ($default != 0) {
   $default = is_useful_get_val($default);
  }
  $form['#attributes'] = array(
    'class' => 'is-useful-form'
  );
  $form['is_useful'] = array(
    '#prefix' => '<div ' . drupal_attributes(array('class' => 'is-useful')) . '>',
    '#type' => 'select',
    '#title' => t('Is useful?'),
    '#default_value' => $default,
    '#options' => is_useful_get_options($settings['entity_type'], $settings['entity_id']),
    '#ajax' => array(
      'callback' => 'is_useful_ajax_callback',
     ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'is_useful') . '/is_useful.js',
      )
    ),
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function is_useful_ajax_callback($form, $form_state) {
  $entity_type = $form_state['settings']['entity_type'];
  $entity_id = $form_state['settings']['entity_id'];
  $value = $form_state['values']['is_useful'];
  is_useful_process_vote($entity_type, $entity_id, $value);
  $form['is_useful']['#default_value'] = is_useful_get_val(is_useful_get_default($entity_type, $entity_id, TRUE));
  $form['is_useful']['#options'] = is_useful_get_options($entity_type, $entity_id, TRUE);
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array(
        'command' => 'isusefulUpdate',
        'data' => drupal_render($form['is_useful']),
      ),
    ),
  );
}


function is_useful_exposed_formatter_submit($form, &$form_state) {
  $entity_type = $form_state['settings']['entity_type'];
  $entity_id = $form_state['settings']['entity_id'];
  $value = $form_state['values']['is_useful'];
  is_useful_process_vote($entity_type, $entity_id, $value);
}

/**
 * Implementation of hook_field_is_empty().
 */
function is_useful_field_is_empty($item, $field) {
}

/**
 * Implements hook_field_prepare_view()
 */
function is_useful_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  // TODO: Clean this function up!
  foreach ($entities as $entity_id => $entity) {
    if ($instances[$entity_id]['widget']['type'] == 'is_useful_exposed') {
      // If the widget type is exposed then we want to look up the voting api values.
      $values = is_useful_get_votes($entity_type, $entity_id);
      // Populating the $items[$id] array even for items with no value forces
      // the render system to output a widget.
      $items[$entity_id] =  (empty($values) ? array(0) : $values);
    }
  }
}
